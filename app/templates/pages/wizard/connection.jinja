{% extends('layouts/base.jinja') %}
{% block page %}
<div class="row">
    <div class="col-lg-10 mx-auto">
        <!-- Main Connection Card -->
        <div class="card">
            <div class="card-header">
                <h3 class="card-title">
                    <i class="ti ti-qrcode me-2"></i>
                    Connection Invitation
                </h3>
            </div>
            <div class="card-body">
                <div class="row align-items-center">
                    <div class="col-lg-6">
                        <div class="text-center mb-4 mb-lg-0">
                            <div class="qr-container d-inline-block p-3 bg-white rounded border">
                                <img src="{{ qrcode(session.demo.invitation_url) }}" alt="Connection QR Code" class="img-fluid" style="max-width: 200px;">
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <h2 class="mb-3">Connect Your Wallet</h2>
                        <p class="text-muted mb-4">Scan this QR code with your mobile wallet to establish a secure connection with the AnonCreds demo server.</p>
                        
                        <!-- Connection Instructions -->
                        <div class="row g-3">
                            <div class="col-12">
                                <div class="d-flex align-items-center">
                                    <div class="shape shape-md me-3">
                                        <i class="ti ti-scan icon icon-1 text-primary"></i>
                                    </div>
                                    <div>
                                        <h6 class="mb-1">Scan QR Code</h6>
                                        <small class="text-muted">Open your wallet app and scan the QR code</small>
                                    </div>
                                </div>
                            </div>
                            <div class="col-12">
                                <div class="d-flex align-items-center">
                                    <div class="shape shape-md me-3">
                                        <i class="ti ti-check icon icon-1 text-success"></i>
                                    </div>
                                    <div>
                                        <h6 class="mb-1">Accept Connection</h6>
                                        <small class="text-muted">Confirm the connection request in your wallet</small>
                                    </div>
                                </div>
                            </div>
                            <div class="col-12">
                                <div class="d-flex align-items-center">
                                    <div class="shape shape-md me-3">
                                        <i class="ti ti-arrow-right icon icon-1 text-info"></i>
                                    </div>
                                    <div>
                                        <h6 class="mb-1">Continue</h6>
                                        <small class="text-muted">Proceed to credential issuance</small>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Connection Status Card -->
        <div class="card mt-4" id="connection-status-card">
            <div class="card-header">
                <h3 class="card-title">
                    <i class="ti ti-device-mobile me-2"></i>
                    Connection Status
                </h3>
            </div>
            <div class="card-body">
                <div class="d-flex align-items-center" id="connection-status-content">
                    {% if session.demo.connection_state == 'active' or session.demo.connection_state == 'completed' %}
                        <div class="shape shape-md me-3">
                            <i class="ti ti-check icon icon-1 text-success"></i>
                        </div>
                        <div class="flex-fill">
                            <h4 class="mb-1 text-success">Connected</h4>
                            <p class="text-muted mb-0">Your wallet is successfully connected to the demo server</p>
                        </div>
                        <span class="badge bg-green text-green-fg">Active</span>
                    {% elif session.demo.connection_state in ['invitation', 'request', 'response'] %}
                        <div class="shape shape-md me-3">
                            <i class="ti ti-clock icon icon-1" style="color: #b45309;"></i>
                        </div>
                        <div class="flex-fill">
                            <h4 class="mb-1" style="color: #b45309;">Connecting...</h4>
                            <p class="text-muted mb-0">
                                {% if session.demo.connection_state == 'invitation' %}
                                    Scan the QR code above to establish connection
                                {% elif session.demo.connection_state == 'request' %}
                                    Connection request sent, waiting for response
                                {% elif session.demo.connection_state == 'response' %}
                                    Connection response received, finalizing
                                {% endif %}
                            </p>
                        </div>
                        <span id="connection-status-badge" class="badge bg-blue-lt">
                            <i class="ti ti-refresh spin me-1"></i>
                            {{ session.demo.connection_state | title }}
                        </span>
                    {% elif session.demo.connection_state == 'abandoned' or session.demo.connection_state == 'error' %}
                        <div class="shape shape-md me-3">
                            <i class="ti ti-x icon icon-1 text-danger"></i>
                        </div>
                        <div class="flex-fill">
                            <h4 class="mb-1 text-danger">Connection Failed</h4>
                            <p class="text-muted mb-0">Connection was abandoned or encountered an error</p>
                        </div>
                        <span class="badge bg-red text-red-fg">{{ session.demo.connection_state | title }}</span>
                    {% else %}
                        <!-- Unknown state - treat as pending to avoid false negatives -->
                        <div class="shape shape-md me-3">
                            <i class="ti ti-clock icon icon-1 text-info"></i>
                        </div>
                        <div class="flex-fill">
                            <h4 class="mb-1 text-info">Processing Connection</h4>
                            <p class="text-muted mb-0">Connection status: <code>{{ session.demo.connection_state }}</code></p>
                        </div>
                        <span class="badge bg-info-lt">
                            <i class="ti ti-refresh spin me-1"></i>
                            Processing
                        </span>
                    {% endif %}
                </div>
            </div>
        </div>

        <!-- Navigation -->
        <div class="d-flex justify-content-between align-items-center mt-4">
            <a href="{{ url_for('restart') }}" class="btn btn-outline-secondary">
                <i class="ti ti-refresh me-1"></i>
                Restart Demo
            </a>
            <div>
                {% if session.demo.connection_state == 'active' or session.demo.connection_state == 'completed' %}
                    <a href="{{ url_for('issuance') }}" class="btn btn-primary">
                        Continue to Issuance
                        <i class="ti ti-arrow-right ms-1"></i>
                    </a>
                {% elif session.demo.connection_state == 'abandoned' or session.demo.connection_state == 'error' %}
                    <button class="btn btn-outline-danger" disabled>
                        Connection Failed
                        <i class="ti ti-x ms-1"></i>
                    </button>
                {% else %}
                    <button class="btn btn-outline-warning" disabled>
                        <i class="ti ti-refresh spin me-1"></i>
                        Waiting for Connection
                    </button>
                {% endif %}
            </div>
        </div>
    </div>
</div>

<style>
    .qr-container {
        animation: pulse 2s infinite;
    }
    
    @keyframes pulse {
        0% { box-shadow: 0 0 0 0 rgba(var(--tblr-primary-rgb), 0.4); }
        70% { box-shadow: 0 0 0 10px rgba(var(--tblr-primary-rgb), 0); }
        100% { box-shadow: 0 0 0 0 rgba(var(--tblr-primary-rgb), 0); }
    }
    
    @keyframes spin {
        from { transform: rotate(0deg); }
        to { transform: rotate(360deg); }
    }
    
    .spin {
        display: inline-block;
        animation: spin 1s linear infinite;
    }
    
    .fade-update {
        animation: fadeUpdate 0.5s ease-in-out;
    }
    
    @keyframes fadeUpdate {
        0% { opacity: 1; }
        50% { opacity: 0.5; }
        100% { opacity: 1; }
    }
</style>

<script>
    // Auto-refresh functionality for connection status
    document.addEventListener('DOMContentLoaded', function() {
        {% if session.demo.connection_state not in ['active', 'completed', 'abandoned', 'error'] %}
            const statusContent = document.getElementById('connection-status-content');
            const navigationDiv = document.querySelector('.d-flex.justify-content-between.align-items-center.mt-4');
            
            // Auto-refresh every 3 seconds if connection is not yet active
            const autoRefreshInterval = setInterval(async function() {
                try {
                    console.log('Checking connection status... Current: {{ session.demo.connection_state }}');
                    
                    // Fetch the current page
                    const response = await fetch("{{ url_for('connection') }}");
                    const html = await response.text();
                    
                    // Parse the HTML
                    const parser = new DOMParser();
                    const doc = parser.parseFromString(html, 'text/html');
                    
                    // Extract the status card content using the specific ID
                    const newStatusContent = doc.getElementById('connection-status-content');
                    const newNavigation = doc.querySelector('.d-flex.justify-content-between.align-items-center.mt-4');
                    
                    if (newStatusContent && statusContent) {
                        // Add fade animation
                        statusContent.classList.add('fade-update');
                        
                        // Update the status content
                        setTimeout(() => {
                            statusContent.innerHTML = newStatusContent.innerHTML;
                            statusContent.classList.remove('fade-update');
                        }, 250);
                    }
                    
                    // Update navigation buttons
                    if (newNavigation && navigationDiv) {
                        navigationDiv.innerHTML = newNavigation.innerHTML;
                    }
                    
                    // Check if connection is now active or completed
                    if (newStatusContent && (newStatusContent.innerHTML.includes('Connected') || newStatusContent.innerHTML.includes('bg-green'))) {
                        console.log('Connection established!');
                        clearInterval(autoRefreshInterval);
                        
                        // Show success notification
                        const toast = document.createElement('div');
                        toast.className = 'toast show position-fixed top-0 end-0 m-3';
                        toast.style.zIndex = '9999';
                        toast.innerHTML = `
                            <div class="toast-header bg-success text-white">
                                <i class="ti ti-check me-2"></i>
                                <strong class="me-auto">Connection Established</strong>
                                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast"></button>
                            </div>
                            <div class="toast-body">
                                You can now continue to credential issuance
                            </div>
                        `;
                        document.body.appendChild(toast);
                        setTimeout(() => toast.remove(), 5000);
                    }
                    
                    // Stop auto-refresh if in failed state
                    if (newStatusContent && (newStatusContent.innerHTML.includes('bg-red') || newStatusContent.innerHTML.includes('Connection Failed'))) {
                        console.log('Connection failed, stopping auto-refresh');
                        clearInterval(autoRefreshInterval);
                    }
                    
                } catch (error) {
                    console.error('Error refreshing status:', error);
                }
            }, 3000);
            
            // Clear interval if page is about to unload
            window.addEventListener('beforeunload', function() {
                clearInterval(autoRefreshInterval);
            });
        {% endif %}
    });
</script>
{% endblock %}